import { useAuthStore } from '@/store/useAuthStore';
import { useSingleApplication } from '@/store/useSingleApplication';
import { useTranslations } from 'next-intl';
import React from 'react';
import { useState, useEffect } from 'react';
import { Button } from '../ui/button';

interface OpenAIResponseProps {
  images: string[];
  onResponse: (response: string | object) => void;
  applicationId?: string;
  activeTab?: string;
  isProcessing?: boolean;
}

export const OpenAIResponse = ({
  images,
  onResponse,
  applicationId,
  activeTab,
  isProcessing,
}: OpenAIResponseProps): React.ReactElement | null => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuthStore();
  const { application } = useSingleApplication();
  const t = useTranslations('Common');

  useEffect(() => {
    if (!process.env.NEXT_PUBLIC_OPENAI_API_KEY) {
      setError('API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env');
    }
  }, []);

  const analyzeImages = async () => {
    if (images.length === 0) return;
    setError(null);
    setIsLoading(true);

    try {
      const base64Images = await Promise.all(
        images.map(async (imageUrl) => {
          try {
            const response = await fetch(imageUrl);
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            const blob = await response.blob();
            return new Promise<string>((resolve) => {
              const reader = new FileReader();
              reader.onloadend = () => {
                const base64 = reader.result as string;
                resolve(base64.split(',')[1]);
              };
              reader.readAsDataURL(blob);
            });
          } catch (error) {
            console.error('Error processing image:', error);
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
          }
        }),
      );

      const prompt = `–¢—ã ‚Äî –º–æ—â–Ω–∞—è OCR-—Å–∏—Å—Ç–µ–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ, –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö:

‚úÖ –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ)(ID_CARD) - –ø–µ—Ä–µ–¥–Ω—è—è –∏ –∑–∞–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
‚úÖ –ü–∞—Å–ø–æ—Ä—Ç (–¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ)(PASSPORT)

–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (docType). –ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å –ø–µ—Ä–µ–¥–Ω—é—é –∏ –∑–∞–¥–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö, –æ–±—ä–µ–¥–∏–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.

üìå –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç, –∏–∑–≤–ª–µ–∫–∏:
- –§–ò–û (–§–∞–º–∏–ª–∏—è - surname, –ò–º—è - givennames, –û—Ç—á–µ—Å—Ç–≤–æ - patronymic) - –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –≤–∫–ª—é—á–∞—è –≤—Å–µ –∫–∞–∑–∞—Ö—Å–∫–∏–µ –±—É–∫–≤—ã (”ô, “ì, “õ, “£, ”©, “±, “Ø, h, —ñ)
- –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì) - birthDate
- –ò–ò–ù (12-–∑–Ω–∞—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä) - identificationNumber
- –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ (documentNumber)
- –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ (issueDate)
- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (expirationDate)
- –û—Ä–≥–∞–Ω, –≤—ã–¥–∞–≤—à–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (issuingAuthority) - –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –∫–∞–∑–∞—Ö—Å–∫–∏–µ –±—É–∫–≤—ã
- –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (birthPlace) - –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –∫–∞–∑–∞—Ö—Å–∫–∏–µ –±—É–∫–≤—ã
- –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ (citizenship) - –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ —Ç–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –µ—Å–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ –ª—é–±–æ–º —è–∑—ã–∫–µ –∏ —Ñ–æ—Ä–º–∞—Ç–µ, —Ç–æ —É–∫–∞–∂–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –∏–Ω–∞—á–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ

‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
1. –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏–ª–∏ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º
2. –ï—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –Ω–æ –µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å, —É–∫–∞–∂–∏ "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å"
3. –î–ª—è –ø–æ–ª–µ–π, –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω—ã –æ–±–∞ —è–∑—ã–∫–∞:
   - –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ –∫–∞–∑–∞—Ö—Å–∫–∏–µ –±—É–∫–≤—ã (”ô, ”ò, “ì, “í, “õ, “ö, “£, “¢, ”©, ”®, “±, “∞, “Ø, “Æ, h, H, —ñ, –Ü)
   - –ù–µ –∑–∞–º–µ–Ω—è–π –∫–∞–∑–∞—Ö—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏
   - –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ, —É–∫–∞–∂–∏ –µ—ë —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–º —è–∑—ã–∫–µ
   - –ï—Å–ª–∏ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö, –±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
4. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –≤—Å–µ –ø–æ–ª—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º—ã–µ
5. –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–∏—à–∏ –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ

‚ö†Ô∏è –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º –ª–∏—á–Ω–æ—Å—Ç–∏, –ø–∞—Å–ø–æ—Ä—Ç–æ–º, —É–∫–∞–∂–∏:
error: "criteriaError" json.

–§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
- –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –æ–±–æ–∑–Ω–∞—á–∞–π –∫–∞–∫ 'ID_CARD'
- –ü–∞—Å–ø–æ—Ä—Ç –æ–±–æ–∑–Ω–∞—á–∞–π –∫–∞–∫ 'PASSPORT'

–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π —è–∑—ã–∫ –∏ –¥–µ–ª–∞–π —Ç–æ—á–Ω–æ —Ç–∞–∫–∂–µ –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –∫–∞–∑–∞—Ö—Å–∫–∏–µ –±—É–∫–≤—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ json —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ù—É–∂–Ω—ã –ø–æ–ª—è: docType, givennames, surname, patronymic, birthDate, birthPlace, documentNumber, issueDate, expirationDate, issuingAuthority, identificationNumber, citizenship`;

      try {
        console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...');

        const requestBody = {
          model: 'gpt-4o',
          messages: [
            {
              role: 'user',
              content: [
                {
                  type: 'text',
                  text: prompt,
                },
                ...base64Images.map((base64) => ({
                  type: 'image_url',
                  image_url: {
                    url: `data:image/jpeg;base64,${base64}`,
                    detail: 'high',
                  },
                })),
              ],
            },
          ],
          max_tokens: 1000,
        };

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...');

        const response = await fetch('/api/openai', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody),
        });

        console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', errorData);

          if (response.status === 401) {
            throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –≤ —Ñ–∞–π–ª–µ .env`);
          }
          const errorMessage =
            errorData.error?.message || `–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}`;
          throw new Error(errorMessage);
        }

        const data = await response.json();
        console.log('data', data);

        if (data.choices[0].message.content && data.choices[0].message.content.includes('error')) {
          onResponse(data.choices[0].message.content);
          return;
        }
        console.log('–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');

        if (!data.choices?.[0]?.message?.content) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
          let parsedContent;
          const content = data.choices[0].message.content;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç markdown-–æ–±—ë—Ä—Ç–∫—É
          const jsonMatch = content.match(/```json\s*\n([\s\S]*?)\n```/);
          if (jsonMatch && jsonMatch[1]) {
            // –ü–∞—Ä—Å–∏–º –∏–∑ markdown-–±–ª–æ–∫–∞
            parsedContent = JSON.parse(jsonMatch[1]);
          } else {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            try {
              parsedContent = JSON.parse(content);
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:', error);
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
              onResponse(content);
              return;
            }
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª–∞–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç
          parsedContent.activeTab = activeTab || '';
          console.log('–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª–∞–¥–∫–µ:', activeTab);

          // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const savedFiles = await Promise.all(
            images.map(async (imageUrl, index) => {
              const formData = new FormData();

              // –ü–æ–ª—É—á–∞–µ–º blob –∏–∑ URL
              const response = await fetch(imageUrl);
              const blob = await response.blob();
              const file = new File([blob], `document-${index + 1}.jpg`, { type: 'image/jpeg' });

              // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ formData
              formData.append('file', file);

              // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
              formData.append('activeTab', activeTab || 'applicant');
              formData.append('applicantId', application?.applicantId || '');
              formData.append('representativeId', application?.representativeId || '');

              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
              formData.append('uploadedById', user?.id || '');
              formData.append('applicationId', applicationId || '');

              // –ö–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞
              formData.append('code', parsedContent.docType || '');

              // –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
              formData.append('number', parsedContent.documentNumber || '');

              // –û—Ä–≥–∞–Ω, –≤—ã–¥–∞–≤—à–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
              formData.append('issuingAuthority', parsedContent.issuingAuthority || '');

              // –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏
              if (parsedContent.issueDate) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
                const dateParts = parsedContent.issueDate.match(/(\d+)[.\/-](\d+)[.\/-](\d+)/);

                if (dateParts) {
                  let day = dateParts[1];
                  let month = dateParts[2];
                  let year = dateParts[3];

                  // –ï—Å–ª–∏ –≥–æ–¥ –∫–æ—Ä–æ—Ç–∫–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 95 –≤–º–µ—Å—Ç–æ 1995)
                  if (year.length === 2) {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ–∫ –ø–æ –≥–æ–¥—É (2000+ –¥–ª—è 00-23, 1900+ –¥–ª—è 24-99)
                    const century = parseInt(year) >= 0 && parseInt(year) <= 23 ? 2000 : 1900;
                    year = String(century + parseInt(year));
                    console.log(`–ö–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥: –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫ ${century}, –ø–æ–ª—É—á–∞–µ–º ${year}`);
                  }

                  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                  day = day.padStart(2, '0');
                  month = month.padStart(2, '0');

                  formData.append('issueDate', `${year}-${month}-${day}`);
                }
              }

              // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
              if (parsedContent.expirationDate) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
                const dateParts = parsedContent.expirationDate.match(/(\d+)[.\/-](\d+)[.\/-](\d+)/);

                if (dateParts) {
                  let day = dateParts[1];
                  let month = dateParts[2];
                  let year = dateParts[3];

                  // –ï—Å–ª–∏ –≥–æ–¥ –∫–æ—Ä–æ—Ç–∫–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 95 –≤–º–µ—Å—Ç–æ 1995)
                  if (year.length === 2) {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ–∫ –ø–æ –≥–æ–¥—É (2000+ –¥–ª—è 00-23, 1900+ –¥–ª—è 24-99)
                    const century = parseInt(year) >= 0 && parseInt(year) <= 23 ? 2000 : 1900;
                    year = String(century + parseInt(year));
                    console.log(`–ö–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥: –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫ ${century}, –ø–æ–ª—É—á–∞–µ–º ${year}`);
                  }

                  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                  day = day.padStart(2, '0');
                  month = month.padStart(2, '0');

                  formData.append('expirationDate', `${year}-${month}-${day}`);
                }
              }

              const uploadResponse = await fetch('/api/upload-document', {
                method: 'POST',
                body: formData,
              });

              if (!uploadResponse.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${uploadResponse.statusText}`);
              }

              const uploadData = await uploadResponse.json();
              console.log('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadData);

              // –î–æ–±–∞–≤–ª—è–µ–º URL –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
              if (!parsedContent.documentUrls) {
                parsedContent.documentUrls = [];
              }
              if (uploadData.url) {
                parsedContent.documentUrls.push(uploadData.url);
              }

              return true;
            }),
          );

          if (savedFiles.every(Boolean)) {
            console.log('–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
          }

          // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å URL –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
          onResponse(parsedContent);
        } catch (error) {
          const uploadError = error as Error;
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', uploadError);
          setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${uploadError.message}`);
          // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          onResponse(data.choices[0].message.content);
        }
      } catch (error) {
        const apiError = error as Error;
        console.error('–û—à–∏–±–∫–∞ API:', apiError);
        setError(apiError.message);
      } finally {
        setIsLoading(false);
      }
    } catch (error) {
      const parsedError = error as Error;
      console.error('–û—à–∏–±–∫–∞:', parsedError);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${parsedError.message}`);
      setIsLoading(false);
    }
  };

  return (
    <div className="mt-4 space-y-4">
      <Button
        onClick={analyzeImages}
        disabled={images.length === 0 || isLoading || isProcessing}
        className="w-full"
      >
        {isLoading || isProcessing ? t('analyzing') : t('analyzeDocuments')}
      </Button>
      {error && <div className="text-red-500">{error}</div>}
    </div>
  );
};
